#!/usr/bin/python
from hermod.hermodBase import *
from hermod.level1b import *
from sys import exit,stderr
import sys
import MySQLdb

"""
rerunOrbits - restarts processing
    
rerunOrbits orbit1 orbit2 modeid calibration threshold_ratio version queue [list]
    orbit1 - first orbit number (hex)
    orbit2 - last orbit number
    modeid - mode id 0 is used for all.
    calibration - l1b calibration nr
    threshold_ratio - rerun if ratio (processedscans/totalscans) is less than threshold_ratio
    version - qsmr version
    queue - rerun/new/batch
    list - produce a list instead of reprocessing
       
examples:
    rerunOrbits 4000 40FF 29 6 .1 2-0 rerun
    rerunOrbits 4000 40FF 29 6 .1 2-0 rerun list

Executing this command would rerun all level1b files having modeid 29
(SM_AC2ab) in calibration 6 which has less than 10% processed scans  in the
interval [4000,40FF]. If 2-0 is a valid processor for that particular freqmode
and calibration, jobs are sent to the queue.  

The difference between the first and second example is the list command. That
produces a list of every mode that matches the search criteria. When ommiting
the list keyword a filter removes every orbitfile with 4 or less spectra.

"""

def main():
    db = MySQLdb.connect(host=config.get('WRITE_SQL','host'), user=config.get('WRITE_SQL','user'), passwd=config.get('WRITE_SQL','passwd'), db='smr')
    #Checking for parameters
    list = False
    if len(sys.argv)!=8: #missing or extra parameters -> end
        if len(sys.argv)==9:
            if sys.argv[8]=='list':
                list = True
            else:
                print __doc__
                sys.exit(sys.argv[0]+" :Not correct number of parameters")
        else:
            print __doc__
            sys.exit(sys.argv[0]+" :Not correct number of parameters")
    parameters = dict()
    parameters['minorbit']=int(sys.argv[1],16)
    parameters['maxorbit']=int(sys.argv[2],16)
    parameters['fqid']=[int(i) for i in sys.argv[3].split(',')]
    parameters['cal']=int(sys.argv[4])
    parameters['threshold']=float(sys.argv[5])
    parameters['qsmr']=sys.argv[6]
    parameters['queue']=sys.argv[7]
    #add dummy values
    parameters['fqid'].append(127)
    parameters['fqid'].append(128)

    if not parameters['queue'] in ['new','batch','rerun']:
        print __doc__
        sys.exit("queue not valid, try new/batch/rerun")

    if float(parameters['threshold'])>1.0001:
        print __doc__
        sys.exit(str(min)+" : The threshold ratio should be in [0..1]")

    fcur = db.cursor()
    status = fcur.execute('''select freqmode from odin.Freqmodes where fqid in %(fqid)s''',parameters)
    parameters['freqmodes'] = [ i[0] for i in fcur]
    #add dummy values
    parameters['freqmodes'].append(127)
    parameters['freqmodes'].append(128)
    fcur.close()

    print parameters
    cursor = db.cursor(MySQLdb.cursors.DictCursor)
    try:
        status = cursor.execute('''select level1.* from level1 
left join level2files using (id) 
where ( level2files.nscans/level1.nscans<%(threshold)s or level2files.processed is null ) 
and orbit>=%(minorbit)s 
and orbit<=%(maxorbit)s 
and freqmode in %(freqmodes)s''',parameters)
    except MySQLdb.MySQLError,e:
        print >> sys.stderr, "Hermod:", str(e)
    except MySQLdb.Warning,e:
        print >> sys.stderr, "Hermod:", str(e)
    except KeyboardInterupt:
        print >> sys.stderr, "Hermod: KeyboardInterrupt, closing database..."
    try:
        level1objects = [level1Factory(i,db) for i in cursor]
    except HermodError,inst:
        sys.exit("HermodError: %s\n" % (inst))
    cursor.close()
    for i in level1objects:
        if i is not None:
            #remove fqids from launchlist
            i.launch = [j for j in i.launch if j['fqid'] in parameters['fqid'] ]
            try:
                if list:
                    print "orb    fqid  fm   ver cal name"
                    for v in i.launch:
                        print"%(orbit)0.4X" % (i.l1),
                        print"%(fqid)5i%(freqmode)4i%(qsmr)7s%(calibration)3i %(name)-9s" % v
                else:
                    print i.l1
                    i.queue(queue=parameters['queue'])
            except HermodError,inst:
                stderr.write('HermodError: %s\n'%(inst)) 
                continue
    db.close()


if __name__=="__main__":
    main()

