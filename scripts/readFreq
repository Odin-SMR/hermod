#!/usr/bin/python

""" 
This script is called after processing of a l2p-file in ~/bin/odinrun. It adds 
information to the database.

./readFreq.py <hex orbit> <calibration> <modename> <qsmr version>
  or preferably
./readFreq.py <orbit> <calibration> <freqmode> <fqid> <qsmr version>

The latter is prefered because is one sql-question faster and more secure for
future work. The first will be deprecated soon.

example:
    ./readFreq 5C52 4 SM_AC2ab 2-0
    ./readFreq 5C52 4 1 29 2-0
"""

import MySQLdb
import sys
import shutil
import os
import re

from pyhdf.HDF import *
from pyhdf.VS import *
from hermod.l2 import level2

def usage():
    """
    Prints short manual
    """
    print """
This script is called after processing of a l2p-file in ~/bin/odinrun. It adds 
information to the database.

./readFreq.py <hex orbit> <calibration> <modename> <qsmr version>
  or preferably
./readFreq.py <orbit> <calibration> <freqmode> <fqid> <qsmr version>

The latter is prefered because it is one sql-question faster and more secure for
future work. The first will be deprecated soon.

example:
    ./readFreq 5C52 4 SM_AC2ab 2-0
    ./readFreq 5C52 4 1 29 2-0
    """

if __name__ == "__main__":
    db = MySQLdb.connect(host="jet",user="odinuser",passwd="***REMOVED***",db="odin")
    #get commandline parameters
    if len(sys.argv) == 6:
        try:
            orbit=int(sys.argv[1],16)
            cal=int(sys.argv[2])
            freq=int(sys.argv[3])
            fqid=int(sys.argv[4])
            qsmr=sys.argv[5]
        except ValueError:
            usage()
            sys.exit(sys.argv[0] +": Not valid parmeters")
    else:
        if len(sys.argv) == 5:
            try:
                orbit=int(sys.argv[1],16)
                cal=int(sys.argv[2])
                mode=sys.argv[3]
                qsmr=sys.argv[4]
            except ValueError:
                usage()
                sys.exit(sys.argv[0] +": Not valid parmeters")
            c = db.cursor()
            status=c.execute("""select Freqmodes.fqid ,Freqmodes.freqmode from Freqmodes natural join Versions where name=%s and calibration=%s and qsmr=%s""" ,(mode,cal,qsmr))
            r = c.fetchone()
            c.close()
            fqid = r[0]
            freq = r[1]
        else:
            if len(sys.argv) <> 6:
                usage()
                sys.exit(sys.argv[0] + ": Not correct number of parameters")
    l2p = Level2(orbit,freq,cal,fqid,qsmr,db)

    print """
    This is readfreq trying to add profiles to the database
    Now looking for orbit %0.4X mode %i in calibration %i 
    in version %s and fqid %i
    """ % (orbit,freq,cal,qsmr,fqid)

    l2p.dell2()
    l2p.readl2()
    l2p.addData()
    l2p.cleanFiles()
    db.close()
