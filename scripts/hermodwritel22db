#!/usr/bin/python

import MySQLdb
import re



from hermod.hermodBase import *
from hermod.level2 import level2Factory
from sys import exit,stderr
from optparse import OptionParser
from os import environ
import MySQLdb



def main():
    """Main program.

    Executing the file will start this function.
    """
    # OptionParser helps reading options from command line
    parser = OptionParser(
            usage='%prog [options]',
            version="%%prog, Hermod %s" % (config.get('DEFAULT','version')),
            description="Reads a list of hermod error-logfiles from standard in. Identifies each job and perform the choosen action. \"grep -l 'pattern'\" generate such lists"
            )
    parser.set_defaults(
            read=False,
            launch=False,
            info=False)
    parser.add_option('-v','--verbose',action='store_true',dest='verbose',
            help='display info when launching to queue'
            )
    parser.add_option('-r','--read',action='store_true',dest='read',
            help='read and add level2files to the database'
            )
    parser.add_option('-l','--launch',action='store_true',dest='launch',
            help='launch jobs into processing system'
            )
    parser.add_option('-i','--info',action='store_true',dest='info',
            help='print some info nothing more'
            )
    (options, args) = parser.parse_args()

    if options.launch or options.read:
        try:
            user = environ['USER']
        except KeyError,inst:
            parser.error("No, user environment found, hermod can not identify user")
        if user<>'odinop':
            parser.error("User %s in not allowed to run this program with the '--launch' option" % user)

    # Initiate a database connection
    try:
        db = MySQLdb.connect(host=config.get('WRITE_SQL','host'), user=config.get('WRITE_SQL','user'),passwd=config.get('WRITE_SQL','passwd'), db='smr')
    except Warning,inst:
        print >> stderr, "Warning: %s" % inst
    except StandardError,inst:
        print >> stderr, "Error: %s" % inst
        exit(1)

    files =args
    pattern = "id(.{1,6})\.(.{4})\.(.{6,10})\.err"
    pat = re.compile(pattern)
    if files==[]:
        cursor = db.cursor(MySQLdb.cursors.DictCursor)
        while True:
            try:
                result = pat.match(raw_input())
                id = result.group(1)
                orbit = int(result.group(2),16)
                name = result.group(3)
                status = cursor.execute('select freqmode,fqid,max(qsmr) as qsmr, calibration  from odin.Freqmodes natural join odin.Versions natural join (select freqmode ,fqid,max(active) as active from odin.Freqmodes natural join odin.Versions group by freqmode,fqid) as t where name=%s group by freqmode,fqid',(name,))
                if options.info:
                    for i in cursor:
                        try:
                            x = level2Factory(orbit,i['freqmode'],i['calibration'],i['fqid'],i['qsmr'],db)
                            x.setFileNames()
                            print x.orbit,x.hdffile
                        except HermodError,inst:
                            print >> stderr, inst
                            continue
                elif options.launch:
                    for i in cursor:
                        try:
                            job = pbsFactory(orbit,i['freqmode'],i['calibration'],i['fqid'],name,i['qsmr'],db)
                            if job is not None:
                                job.prepare()
                                job.run()
                                job.write()
                                job.upload()
                                job.clean()
                        except HermodError,inst:
                            print >> stderr, inst
                            continue
                elif options.read:
                    for i in cursor:
                        try:
                            job = level2Factory(orbit,i['freqmode'],i['calibration'],i['fqid'],i['qsmr'],db)
                            job.setFileNames()
                            job.readAuxFile()
                            job.readData()
                            if options.verbose:
                                print "Adding and uploading %(id)i - %(orbit)X, %(nscans)s processed scans" % job.info
                            try:
                                job.addData()
                            except ValueError,inst:
                                raise HermodError("Can't add data into db: %s" %inst)
                            job.upload()
                        except HermodError,inst:
                            print >> stderr, inst
                            continue
                else:
                    pass
            except EOFError:
                break
    cursor.close()
    db.close()
#    x.readAuxFile()
#    x.readData()
#    x.addData()
#    x.upload()
#    #find what freqmodes to launch
#    fcur = db.cursor()
#    status = fcur.execute('''select freqmode from odin.Freqmodes where fqid in %s''',(options.fqid,))
#    fm = [ i[0] for i in fcur]
#    #add dummy values
#    fm.append(127) 
#    fm.append(128)
#    setattr(parser.values,'freqmode',fm)
#    fcur.close()

if __name__=="__main__":
    main()
