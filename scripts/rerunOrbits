#!/usr/bin/python

"""rerunOrbits - restarts processing
    
rerunOrbits orbit1 orbit2 modeid calibration threshold_ratio version queue [list]
    orbit1 - first orbit number (hex)
    orbit2 - last orbit number
    modeid - mode id 0 is used for all.
    calibration - l1b calibration nr
    threshold_ratio - rerun if ratio (processedscans/totalscans) is less than threshold_ratio
    version - qsmr version
    queue - rerun/new/batch
    list - produce a list instead of reprocessing
       
examples:
    rerunOrbits 4000 40FF 29 6 .1 2-0 rerun
    rerunOrbits 4000 40FF 29 6 .1 2-0 rerun list

Executing this command would rerun all level1b files having modeid 29
(SM_AC2ab) in calibration 6 which has less than 10% processed scans  in the
interval [4000,40FF]. If 2-0 is a valid processor for that particular freqmode
and calibration, jobs are sent to the queue.  

The difference between the first and second example is the list command. That
produces a list of every mode that matches the search criteria. When ommiting
the list keyword a filter removes every orbitfile with 4 or less spectra.

"""

import MySQLdb
import sys
import shutil
import os
import re
import glob,commands

from hermod.hermodBase import *
from hermod.l2.level2 import *
from hermod.l1b.level1b import *
from hermod.l1b.transitions import *


def main():
    db = MySQLdb.connect(host=config.get('WRITE_SQL','host'), user=config.get('WRITE_SQL','user'), passwd=config.get('WRITE_SQL','passwd'), db=config.get('WRITE_SQL','db'))
    list=False
    #Checking for parameters
    if len(sys.argv)!=8: #missing or extra parameters -> end
        if len(sys.argv)==9:
            if sys.argv[8]=='list':
                list = True
            else:
                print __doc__
                sys.exit(sys.argv[0]+" :Not correct number of parameters")
        else:
            print __doc__
            sys.exit(sys.argv[0]+" :Not correct number of parameters")

    orbit1=int(sys.argv[1],16)
    orbit2=int(sys.argv[2],16)
    fqid=int(sys.argv[3])
    cal=int(sys.argv[4])
    min=float(sys.argv[5])
    qsmr=sys.argv[6]
    queue=sys.argv[7]

    if float(min)>1.0001:
        usage()
        sys.exit(str(min)+" : The threshold ratio should be in [0..1]")

    c=db.cursor(MySQLdb.cursors.SSDictCursor)
    # NOTE a filter scans>=4 is inserted...
    try:
        if fqid==0: #all freqmodes
            status = c.execute("""select orbit,freqmode,fqid,calibration,qsmr,scans,processed,processed/scans as ratio from registered_orbits natural join Versions natural join Freqmodes natural left join processed_orbits where active and orbit>=%s and orbit<=%s and calibration=%s and qsmr=%s and scans>=4 having ratio<%s or ratio is null""",(orbit1,orbit2,cal,qsmr,min))
        else:
            status = c.execute("""select orbit,freqmode,fqid,calibration,qsmr,scans,processed,processed/scans as ratio from registered_orbits natural join Versions natural join Freqmodes natural left join processed_orbits where active and orbit>=%s and orbit<=%s and fqid=%s and calibration=%s and qsmr=%s and scans>=4 having ratio<%s or ratio is null""",(orbit1,orbit2,fqid,cal,qsmr,min))
    except MySQLdb.MySQLError,e:
        print >> sys.stderr, "Hermod:", str(e)
    except MySQLdb.Warning,e:
        print >> sys.stderr, "Hermod:", str(e)
    except KeyboardInterupt:
        print >> sys.stderr, "Hermod: KeyboardInterrupt, closing database..."
        c.close()
    else:
        print "orb\tfreq\tfqid\tqsmr\tscans\tproc\tratio"
        if list:
            for mode in c:
                print "%0.4X\t%i\t%i\t%s\t%i\t%s\t%s" %(mode['orbit'],mode['freqmode'],mode['fqid'],mode['qsmr'],mode['scans'],str(mode['processed']),str(mode['ratio']))
        else:
            for o in c: #loop over all orbits found in above selection
                try:
                    y = Level1bResolver(o['orbit'],o['calibration'],o['freqmode'],o['fqid'],o['qsmr'],db)
                except HermodError,e:
                    print >> sys.stderr, "Hermod:",e
                # We don't want to do cleaning, reading l2b fix that.
                # y.cleanDatabase()
                print "%0.4X\t%i\t%i\t%s\t%i\t%s\t%s" %(o['orbit'],o['freqmode'],o['fqid'],o['qsmr'],o['scans'],str(o['processed']),str(o['ratio']))
                try:
                    y.createFiles(queue,o['qsmr'])
                except HermodError,e:
                    print >> sys.stderr, "Hermod:",e
    c.close()

if __name__ == "__main__":
    main()
